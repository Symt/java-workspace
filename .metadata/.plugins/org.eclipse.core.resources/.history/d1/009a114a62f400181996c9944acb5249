package main;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Arrays;

import javax.swing.JFrame;

public class Client extends JFrame {
	private static final long serialVersionUID = 1L;
	static HostC frame;
	static String board = "W-1-W-1-W-1-W-1 1-W-1-W-1-W-1-W W-1-W-1-W-1-W-1 B-W-B-W-B-W-B-W W-B-W-B-W-B-W-B 2-W-2-W-2-W-2-W W-2-W-2-W-2-W-2 2-W-2-W-2-W-2-W";
	static String user;
	static String serverData;
	static boolean time = false;
	static String[][] boardMatrix = new String[8][8];

	public Client() {
		frame = new HostC('1', null, this);
		frame.setSize(8 * 44, 8 * 44 + 21);
		frame.setResizable(false);
		formatBoard();
		frame.setBoard(boardMatrix);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
		frame.setTitle("Client");
		frame.setVisible(true);
	}

	public static void main(String args[]) {
		new Client();
		try {
			Thread.sleep(2000);
		} catch (InterruptedException e) {}
		String host = "localhost";
		int port = 8081;
		try (Socket socket = new Socket(host, port);
				PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
				BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));) {
			serverData = "";
			user = "";
			while ((serverData = in.readLine()) != null) {
				board = serverData;
				formatBoard();
				frame.setBoard(boardMatrix);
				frame.repaint();
				time = false;
				while (!time) {
					Thread.sleep(100);
				}
				user = boardString();
				if (user != null) {
					out.println(user);
				}
			}
		} catch (UnknownHostException e) {
			System.out.println("Error: Bad Host");
		} catch (IOException e) {
			System.out.println("Error: Failure to obtain I/O for connection");
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	public static void formatBoard() {
		String[] rows = board.split(" ");
		for (int i = 0; i < rows.length; i++) {
			boardMatrix[boardMatrix.length - i - 1] = (String[]) reverse(rows[i].split("-"));
		}
	}

	public static String boardString() {
		String result = "";
		for (int i = boardMatrix.length - 1; i >= 0; i--) {
			for (int j = boardMatrix[i].length - 1; j >= 0; j--) {
				result += boardMatrix[i][j] + "-";
			}
			result = result.substring(0, result.length() - 1);
			result += " ";
		}
		result = result.substring(0, result.length() - 1);
		return result;
	}

	public static void updateBoard(String[][] board1) {
		boardMatrix = board1;
		board = boardString();
	}

	public static <T> T[] reverse(T[] arr) {
		for (int i = 0; i < arr.length / 2; i++) {
			T temp = arr[i];
			arr[i] = arr[arr.length - i - 1];
			arr[arr.length - i - 1] = temp;
		}
		return arr;
	}
}